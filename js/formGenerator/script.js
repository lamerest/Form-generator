let request = new XMLHttpRequest();
request.open('GET', './layout.json');
request.onload = function() {
    let layout = request.response
    createForm(layout)
}
request.responseType = 'json'
request.send();


function createForm(jsonObj){
    let form = document.createElement('form')

    // Creating header of form
    let h2 = document.createElement('h2')
    h2.textContent = jsonObj['name']
    h2.style.textAlign = 'center'
    h2.className = "form__header"
    form.appendChild(h2)

    // Inputs adder
    for (const i in jsonObj["inputs"]) {
        let input =  inputByType(jsonObj["inputs"][i])



        // Adding block to form
        form.appendChild(input)

    }

    // Submit button
    let submit = document.createElement('input')
    submit.type = "submit"
    submit.innerHTML = jsonObj.submit.text
    submit.setAttribute("onclick", jsonObj.submit.onclick)
    submit.className = "autogenerated__submit__button"
    submit.id = "submit"
    form.appendChild(submit)


    // Form customs
    form.name = "autogenerated_form"
    form.id = jsonObj["id"]
    formTheme(jsonObj)
    if (jsonObj.hasOwnProperty("method")) form.method = jsonObj.method
    else form.method = 'post'
    form.action = jsonObj.action
    form.className = jsonObj["class"]
    //form.action = jsonObj.action

    // Adding form to body
    let body = document.getElementsByTagName('body')[0]
    body.appendChild(form)
    addFormValidation()
    addFormTracker()
}


function inputByType(obj){
    // obj = jsonObj["inputs"]
    switch (obj["type"]) {

        case "text":
            let input = createBlock(obj)
            return input;

        // List type using  select to create dropdown lists with simple options and option groups
        case "list":
            let select = document.createElement('select')
            select = addOptionGroup(obj, select)
            if (obj.hasOwnProperty("required") && obj.required === true){
                select.required = true
            }
            select.appendChild(createEmptyOption())

            return createBlock(obj, "list", select)

        case "tel":
            return createBlock(obj)

        // Date type uses 3 <select> inputs
        case "date":

            return createDateInput(obj)

        case "checkbox":
            return createBlock(obj, "checkbox")

        case "latin":
            let latin = createBlock(obj)
            latin.lastChild.pattern = "[A-Za-z]{2,}"
            return latin

        default:
            return createBlock(obj)

    }
}


// Creates input tag with properties from json
function createInput(obj) {
    let input = document.createElement('input')
    for (let key in obj) {
        if (key === "label") continue
        input[key] = obj[key]
    }
    return input
}

function createLabel(obj){
    let label
    if (obj.type !== "button"){
        label = document.createElement('label')
        label.innerText = obj["label"]
        label.setAttribute('for', obj["id"])

    }
    return label
}

function createBlock(obj, className, input=createInput(obj)){
    let inputBlock = document.createElement('div')
    inputBlock.appendChild(createLabel(obj))

    if (input.hasOwnProperty("checkbox")){
        inputBlock.appendChild(input)

        obj["checkbox"]["type"] = "checkbox"
        let checkbox = createBlock(obj["checkbox"], "checkbox")
        inputBlock.appendChild(checkbox)

        if (obj["checkbox"].hasOwnProperty("input")){

            let innerInput = createBlock(obj["checkbox"]["input"])
            innerInput.style.display = "none"
            inputBlock.appendChild(innerInput)

            checkbox.addEventListener("change", (event) => {
                if (innerInput.style.display === "flex") innerInput.style.display = "none"
                else innerInput.style.display = "flex"
            })
        }

        if (obj["checkbox"].hasOwnProperty("blockInput")){
            checkbox.addEventListener("change", (event) => {

                if (inputBlock.childNodes[1].getAttribute("readonly") === "readonly") {
                    inputBlock.childNodes[1].removeAttribute("readonly")
                } else{
                    inputBlock.childNodes[1].setAttribute("readonly", "readonly")
                }

            })
        }

    } else {
        inputBlock.appendChild(input)
    }
    if (className){
        inputBlock.className = className
    }
    return inputBlock
}

function addOptionGroup(obj, parent){

    if (obj.hasOwnProperty("optgroups")){
        for (const group of obj["optgroups"]) {
            // Creating optgroup and its label
            let optgroup = document.createElement("optgroup")

            if (group.hasOwnProperty("label")){
                optgroup.label = group.label
            }


            // Creating option groups
            optgroup = addOptionGroup(group, optgroup)

            // Adding group to select
            parent.appendChild(optgroup)

        }

    }
    if (obj.hasOwnProperty("options")){
        parent = addOptions(obj, parent)
    }
    return parent
}

function addOptions(obj, parent) {
    for (const opt of obj["options"]) {
        let option
        if (typeof opt === "string" || typeof opt === "number"){
            option = document.createElement("option")
            option.textContent = opt
            option.value = opt
        } else {
            option = document.createElement("option")
            option.textContent = opt["text"]
            if (opt.hasOwnProperty("value")){
                option.value = opt["value"]
            } else {
                option.value = option.innerText
            }
        }
        parent.appendChild(option)
    }
    return parent
}

function createEmptyOption() {
    let emptyOpt = document.createElement('option')
    emptyOpt.setAttribute("hidden", "")
    emptyOpt.setAttribute("selected", "")
    emptyOpt.setAttribute("disabled", "")
    return emptyOpt
}

function formTheme(form) {

    // URL to theme's directory
    let url = "css/themes/"

    // Add your css file name here to add theme
    switch (form["theme"]) {
        case "white":
            url += "white.css"
            break
        case "black":
            url += "black.css"
            break
        default:
            url += "white.css"
    }

    let link = document.createElement("link")
    link.type = "text/css"
    link.rel = "stylesheet"
    link.href = url
    document.getElementsByTagName("head")[0].appendChild(link)
}

function createDateInput(obj) {
    let days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]

    let day
    day = addOptionGroup({ "optgroups": [{ "options": days }] } , document.createElement('select'))
    day.lastChild.id = "days28"
    day.lastChild.setAttribute("hidden", "")

    days.push(29)
    day = addOptionGroup({ "optgroups": [{ "options": days }] } , day)
    day.lastChild.id = "days29"
    day.lastChild.setAttribute("hidden", "")

    days.push(30)
    day = addOptionGroup({ "optgroups": [{ "options": days }] }, day)
    day.lastChild.id = "days30"
    day.lastChild.setAttribute("hidden", "")

    days.push(31)
    day = addOptionGroup({ "optgroups": [{ "options": days }] }, day)
    day.lastChild.id = "days31"

    day.appendChild(createEmptyOption())

    let month
    let months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
    month = addOptionGroup({"options": months}, document.createElement('select'))
    month.appendChild(createEmptyOption())

    let year
    let years = []
    for (let i = 2007; i >= 1902; i--) {
        years.push(i)
    }
    year = addOptionGroup({"options": years}, document.createElement('select'))
    year.appendChild(createEmptyOption())

    if (obj.hasOwnProperty("required") && obj.required === true){
        day.setAttribute("required", "")
        month.setAttribute("required", "")
        year.setAttribute("required", "")
    }

    let inputBlock = document.createElement('div')
    inputBlock.appendChild(day)
    inputBlock.appendChild(month)
    inputBlock.appendChild(year)
    inputBlock.style.flexWrap = "nowrap"
    inputBlock.style.width = "294px"
    inputBlock.style.margin = "0"
    inputBlock.id = obj["id"]
    inputBlock.className = "form_date"


    let dateBlock = document.createElement("div")
    let label = createLabel(obj)
    dateBlock.appendChild(label)
    dateBlock.className = "list"
    dateBlock.appendChild(inputBlock)
    return dateBlock
}